{
	"name": "Dataflow_Aggregate_Data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "table_sqldb_nyc_payroll_data",
						"type": "DatasetReference"
					},
					"name": "TableSQLDBNycPayrollData",
					"description": "Table SQL DB Nyc Payroll Data"
				},
				{
					"dataset": {
						"referenceName": "Historical_Files_Payroll_2020",
						"type": "DatasetReference"
					},
					"name": "PayrollHistory2020",
					"description": "Payroll History File 2020 In Data Lake History Folder"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Table_Synapse_Nycpayroll_Summary",
						"type": "DatasetReference"
					},
					"name": "SinkPayrollSumary",
					"description": "Sink Payroll Sumary"
				}
			],
			"transformations": [
				{
					"name": "UnionWithHistoryFiles"
				},
				{
					"name": "Filter"
				},
				{
					"name": "TotalPald",
					"description": "table_synapse_nycpayroll_summary"
				},
				{
					"name": "Aggregate"
				}
			],
			"scriptLines": [
				"parameters{",
				"     FiscalYear as string",
				"}",
				"source(output(",
				"          FiscalYear as string,",
				"          PayrollNumber as string,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as string,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as string,",
				"          PayBasis as string,",
				"          RegularHours as string,",
				"          RegularGrossPaid as string,",
				"          OTHours as string,",
				"          TotalOTPaid as string,",
				"          TotalOtherPay as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TableSQLDBNycPayrollData",
				"source(output(",
				"          FiscalYear as string,",
				"          PayrollNumber as string,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as string,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as string,",
				"          PayBasis as string,",
				"          RegularHours as string,",
				"          RegularGrossPaid as string,",
				"          OTHours as string,",
				"          TotalOTPaid as string,",
				"          TotalOtherPay as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PayrollHistory2020",
				"TableSQLDBNycPayrollData, PayrollHistory2020 union(byName: true)~> UnionWithHistoryFiles",
				"UnionWithHistoryFiles filter(toString(FiscalYear) >= $FiscalYear) ~> Filter",
				"Filter derive(TotalPaid = 'RegularGrossPaid + TotalOTPaid+TotalOtherPay') ~> TotalPald",
				"TotalPald aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = count('TotalOTPaid')) ~> Aggregate",
				"Aggregate sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkPayrollSumary"
			]
		}
	}
}